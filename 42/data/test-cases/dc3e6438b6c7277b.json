{
  "uid" : "dc3e6438b6c7277b",
  "name" : "Check progres-bar and buttons.",
  "fullName" : "tests.test_speech_exercises_en.TestCardsEN#test_progress_bar_is_present_en",
  "historyId" : "efb827312bdd34b296637645e49b0897",
  "time" : {
    "start" : 1727142810441,
    "stop" : 1727142875959,
    "duration" : 65518
  },
  "status" : "skipped",
  "statusMessage" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [504]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fc84ee5d8b0>\ns = '<!DOCTYPE html>\\n<html>\\n<head>\\n<title>Error</title>\\n<style>\\nhtml { color-scheme: light dark; }\\nbody { width: 35e...ce then you should check\\nthe error log for details.</p>\\n<p><em>Faithfully yours, nginx.</em></p>\\n</body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_speech_exercises_en.TestCardsEN object at 0x7fc84dd0a6c0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c8ec91c8de9f7068d0c38fb6492dcee7\")>\nspecialist_user_authorized = None\n\n    @pytest.mark.xfail\n    @allure.suite(\"Speech exercises EN.\")\n    @allure.title('Check progres-bar and buttons.')\n    def test_progress_bar_is_present_en(self, driver, specialist_user_authorized):\n        page = SpeechExercisesPage(driver)\n        page.select_group(SpeechExercisesPageLocators.WORDS_BUTTON_EN)\n        seria_id = page.set_url_to_get_id_words_group()\n        card_id = page.click_random_card_in_words()\n    \n        page = SpeechExercisesAPI(driver)\n>       random_id = page.get_random_id_from_list_sub_group(card_id, seria_id)\n\ntests/test_speech_exercises_en.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/speech_exercises_page_api.py:41: in get_random_id_from_list_sub_group\n    with allure.step(f'Getting list of cards id: {list_cards_id.json()}'):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [504]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "specialist_user_authorized",
    "time" : {
      "start" : 1727142780313,
      "stop" : 1727142810441,
      "duration" : 30128
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "USER specialist authorized",
      "time" : {
        "start" : 1727142780313,
        "stop" : 1727142810441,
        "duration" : 30128
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Check url is present: https://brainup.site/groups",
        "time" : {
          "start" : 1727142780690,
          "stop" : 1727142810416,
          "duration" : 29726
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Loader checking",
        "time" : {
          "start" : 1727142810416,
          "stop" : 1727142810441,
          "duration" : 25
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "driver",
        "value" : "<selenium.webdriver.chrome.webdriver.WebDriver (session=\"c8ec91c8de9f7068d0c38fb6492dcee7\")>"
      }, {
        "name" : "main_page_open",
        "value" : "None"
      } ],
      "stepsCount" : 2,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "driver",
    "time" : {
      "start" : 1727142776441,
      "stop" : 1727142777203,
      "duration" : 762
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "main_page_open",
    "time" : {
      "start" : 1727142777203,
      "stop" : 1727142780313,
      "duration" : 3110
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Open page: https://brainup.site/",
      "time" : {
        "start" : 1727142777203,
        "stop" : 1727142780313,
        "duration" : 3110
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "driver",
        "value" : "<selenium.webdriver.chrome.webdriver.WebDriver (session=\"c8ec91c8de9f7068d0c38fb6492dcee7\")>"
      } ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1727142140719,
      "stop" : 1727142140720,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "skipped",
    "statusMessage" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [504]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fc84ee5d8b0>\ns = '<!DOCTYPE html>\\n<html>\\n<head>\\n<title>Error</title>\\n<style>\\nhtml { color-scheme: light dark; }\\nbody { width: 35e...ce then you should check\\nthe error log for details.</p>\\n<p><em>Faithfully yours, nginx.</em></p>\\n</body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_speech_exercises_en.TestCardsEN object at 0x7fc84dd0a6c0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c8ec91c8de9f7068d0c38fb6492dcee7\")>\nspecialist_user_authorized = None\n\n    @pytest.mark.xfail\n    @allure.suite(\"Speech exercises EN.\")\n    @allure.title('Check progres-bar and buttons.')\n    def test_progress_bar_is_present_en(self, driver, specialist_user_authorized):\n        page = SpeechExercisesPage(driver)\n        page.select_group(SpeechExercisesPageLocators.WORDS_BUTTON_EN)\n        seria_id = page.set_url_to_get_id_words_group()\n        card_id = page.click_random_card_in_words()\n    \n        page = SpeechExercisesAPI(driver)\n>       random_id = page.get_random_id_from_list_sub_group(card_id, seria_id)\n\ntests/test_speech_exercises_en.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/speech_exercises_page_api.py:41: in get_random_id_from_list_sub_group\n    with allure.step(f'Getting list of cards id: {list_cards_id.json()}'):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [504]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "select_group",
      "time" : {
        "start" : 1727142810441,
        "stop" : 1727142813305,
        "duration" : 2864
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Select Russian language. Click \"EN\" button.",
        "time" : {
          "start" : 1727142810441,
          "stop" : 1727142810504,
          "duration" : 63
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Click button \"SPEECH EXERCISES\".",
        "time" : {
          "start" : 1727142810504,
          "stop" : 1727142810566,
          "duration" : 62
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Click button \"WORDS\".",
        "time" : {
          "start" : 1727142813246,
          "stop" : 1727142813305,
          "duration" : 59
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "selector_for_sub_group",
        "value" : "('xpath', '//button[@data-test-active-link=\"Words\"]')"
      } ],
      "stepsCount" : 3,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "Get seria ID from URL: https://brainup.site/groups/4/series/9",
      "time" : {
        "start" : 1727142813305,
        "stop" : 1727142814822,
        "duration" : 1517
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Wait until url to be: https://brainup.site/groups/4/series/9.",
        "time" : {
          "start" : 1727142813305,
          "stop" : 1727142814819,
          "duration" : 1514
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 1,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "click_random_card_in_words",
      "time" : {
        "start" : 1727142814822,
        "stop" : 1727142815354,
        "duration" : 532
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "get_random_id_from_list_sub_group",
      "time" : {
        "start" : 1727142815354,
        "stop" : 1727142875929,
        "duration" : 60575
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/auto-tests-python/auto-tests-python/pages/speech_exercises_page_api.py\", line 41, in get_random_id_from_list_sub_group\n    with allure.step(f'Getting list of cards id: {list_cards_id.json()}'):\n                                                  ^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ {
        "name" : "Status code is: 504",
        "time" : {
          "start" : 1727142875929,
          "stop" : 1727142875929,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Send GET request with params: https://brainup.site/api/subgroups?seriesId=9 headers=\"Content-Type\": \"application/json\",\"Authorization\": \"Bearer\": \"{id_token}\"",
        "time" : {
          "start" : 1727142875929,
          "stop" : 1727142875929,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "card_id",
        "value" : "35"
      }, {
        "name" : "seria_id",
        "value" : "'9'"
      } ],
      "stepsCount" : 2,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 10,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "driver::0",
    "time" : {
      "start" : 1727142875998,
      "stop" : 1727142876100,
      "duration" : 102
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Speech exercises."
  }, {
    "name" : "suite",
    "value" : "Speech exercises EN."
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.xfail"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "subSuite",
    "value" : "TestCardsEN"
  }, {
    "name" : "host",
    "value" : "fv-az732-683"
  }, {
    "name" : "thread",
    "value" : "2315-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_speech_exercises_en"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 0,
        "skipped" : 2,
        "passed" : 40,
        "unknown" : 0,
        "total" : 42
      },
      "items" : [ {
        "uid" : "f06f47033459329b",
        "reportUrl" : "https://lambotik.github.io/auto-tests-python/41//#testresult/f06f47033459329b",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1727056284330,
          "stop" : 1727056292633,
          "duration" : 8303
        }
      }, {
        "uid" : "8015c51bf4bf50b5",
        "reportUrl" : "https://lambotik.github.io/auto-tests-python/40//#testresult/8015c51bf4bf50b5",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1726970214603,
          "stop" : 1726970222868,
          "duration" : 8265
        }
      }, {
        "uid" : "d91e24e82c0918fd",
        "reportUrl" : "https://lambotik.github.io/auto-tests-python/39//#testresult/d91e24e82c0918fd",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1726883211497,
          "stop" : 1726883220117,
          "duration" : 8620
        }
      }, {
        "uid" : "5fc2a640f0e0fb43",
        "reportUrl" : "https://lambotik.github.io/auto-tests-python/38//#testresult/5fc2a640f0e0fb43",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1726796961292,
          "stop" : 1726796969365,
          "duration" : 8073
        }
      }, {
        "uid" : "6a27676d7cb57b2",
        "reportUrl" : "https://lambotik.github.io/auto-tests-python/37//#testresult/6a27676d7cb57b2",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1726710545078,
          "stop" : 1726710553147,
          "duration" : 8069
        }
      }, {
        "uid" : "49e805f0f39d63aa",
        "reportUrl" : "https://lambotik.github.io/auto-tests-python/12//#testresult/49e805f0f39d63aa",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1726650483013,
          "stop" : 1726650493267,
          "duration" : 10254
        }
      }, {
        "uid" : "2a3cbff99c9e8198",
        "reportUrl" : "https://lambotik.github.io/auto-tests-python/11//#testresult/2a3cbff99c9e8198",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1726648199658,
          "stop" : 1726648209389,
          "duration" : 9731
        }
      }, {
        "uid" : "eb369536947c898f",
        "reportUrl" : "https://lambotik.github.io/auto-tests-python/36//#testresult/eb369536947c898f",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1726624025889,
          "stop" : 1726624035694,
          "duration" : 9805
        }
      }, {
        "uid" : "cca3b8fd9cd181b9",
        "reportUrl" : "https://lambotik.github.io/auto-tests-python/10//#testresult/cca3b8fd9cd181b9",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1726573125511,
          "stop" : 1726573138032,
          "duration" : 12521
        }
      }, {
        "uid" : "2a30e041dbce3594",
        "reportUrl" : "https://lambotik.github.io/auto-tests-python/9//#testresult/2a30e041dbce3594",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1726572397590,
          "stop" : 1726572405422,
          "duration" : 7832
        }
      }, {
        "uid" : "c8ceefced796418f",
        "reportUrl" : "https://lambotik.github.io/auto-tests-python/8//#testresult/c8ceefced796418f",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1726568760969,
          "stop" : 1726568771046,
          "duration" : 10077
        }
      }, {
        "uid" : "6cc71f0bf2c8463c",
        "reportUrl" : "https://lambotik.github.io/auto-tests-python/32//#testresult/6cc71f0bf2c8463c",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1718215179414,
          "stop" : 1718215187772,
          "duration" : 8358
        }
      }, {
        "uid" : "6980c308644106cc",
        "reportUrl" : "https://lambotik.github.io/auto-tests-python/4//#testresult/6980c308644106cc",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1718215186493,
          "stop" : 1718215194573,
          "duration" : 8080
        }
      }, {
        "uid" : "97982ac7a30ea333",
        "reportUrl" : "https://lambotik.github.io/auto-tests-python/3//#testresult/97982ac7a30ea333",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1718214895545,
          "stop" : 1718214905520,
          "duration" : 9975
        }
      }, {
        "uid" : "c3a4c93cbd5a2da2",
        "reportUrl" : "https://lambotik.github.io/auto-tests-python/31//#testresult/c3a4c93cbd5a2da2",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1718152759236,
          "stop" : 1718152768640,
          "duration" : 9404
        }
      }, {
        "uid" : "5a37b33a7bf4482d",
        "reportUrl" : "https://lambotik.github.io/auto-tests-python/30//#testresult/5a37b33a7bf4482d",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1718066457971,
          "stop" : 1718066467602,
          "duration" : 9631
        }
      }, {
        "uid" : "50a36887cf55d0c6",
        "reportUrl" : "https://lambotik.github.io/auto-tests-python/29//#testresult/50a36887cf55d0c6",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1717980024771,
          "stop" : 1717980033689,
          "duration" : 8918
        }
      }, {
        "uid" : "3c9b5955d92f4d1d",
        "reportUrl" : "https://lambotik.github.io/auto-tests-python/28//#testresult/3c9b5955d92f4d1d",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1717893880923,
          "stop" : 1717893890979,
          "duration" : 10056
        }
      }, {
        "uid" : "32ab587191119bae",
        "reportUrl" : "https://lambotik.github.io/auto-tests-python/27//#testresult/32ab587191119bae",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1717807162798,
          "stop" : 1717807171532,
          "duration" : 8734
        }
      }, {
        "uid" : "77a894f4e30b5c72",
        "reportUrl" : "https://lambotik.github.io/auto-tests-python/26//#testresult/77a894f4e30b5c72",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1717720929173,
          "stop" : 1717720939536,
          "duration" : 10363
        }
      } ]
    },
    "tags" : [ "@pytest.mark.xfail" ]
  },
  "source" : "dc3e6438b6c7277b.json",
  "parameterValues" : [ ]
}